Git总结—-（廖雪峰github 官网）
	详细内容：https://www.liaoxuefeng.com/wiki0013739516305929606dd18361248578c67b8067c8c017b000

Git安装：
    1.在Linux上安装Git
		输入git没有安装，会告诉你如何安装Git。
    2.用Debian或Ubuntu Linux
 		一条sudo apt-get install git就可以直接完成Git的安装
		老一点的Debian或Ubuntu Linux，要把命令改为sudo apt-get install git-core
    3.其他Linux版本
		先从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。
    4.在Mac OS X上安装Git
		一是通过homebrew安装Git，具体方法请参考homebrew的文档：http://brew.sh/。一般输入文档第一行命令即可安装
		第二种方法Xcode集成了Git，适合苹果开发着，其他开发适合用第一种
    5.在Windows上安装Git
		Git官网直接下载安装程序，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-		>“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！
    6.安装完成后，还需要最后一步设置
		在命令行输入：
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
创建版本库：
    1.选择一个合适的地方，创建一个空目录：
		$ mkdir learngit
		$ cd learngit
		$ pwd
		/Users/michael/learngit
	        pwd命令用于显示当前目录。在我的Mac上，这个仓库位于/Users/michael/learngit。
     2.git init命令把这个目录变成Git可以管理的仓库：
		$ git init
		Initialized empty Git repository in /Users/michael/learngit/.git/
		此目录先多一个.git隐藏文件。mac系统上通过快捷键command+shift+.可以看的到
     3.把文件添加到版本库
		版本控制系统，其实只能跟踪文本文件的改动，没法跟踪文件的变化，不支持Word格式的二进制格式文件，Windows的童鞋也不支持		自带的记事本编辑文本文件，建议你下载Notepad++代替记事本

    1. git add <file>，注意，可反复多次使用，添加多个文件；
    2. git commit -m <message>，完成。

版本回退：
		•   HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
        * 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
        * 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

撤销修改：
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回	到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件：
	$ rm 文件名     删除工作区的文件
	$ git rm 文件名   删除版本区文件
	$ git checkout -- 文件名   从版本库中回复工作区误删的文件

远程仓库：
	1.创建SSH Key
		在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已	经有了，可直		接跳	到下一步。注意是隐藏文件，前面说过隐藏文件如何查看（shift + command  + .    mac环境下）如果没有，打开					Shell（Windows下打开Git Bash），创建SSH Key：
		$ ssh-keygen -t rsa -C "youremail@example.com"
		你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可
        2.登陆GitHub
		打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内			容：，添加即可
       3.关联github仓库
		github上创建一个新仓库与本地仓库关联
		在本地的learngit仓库下运行命令：
		$ git remote add origin git@github.com:michaelliao/learngit.git

	4.	
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	5.从远程库克隆
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。$ git clone git@github.com:michaelliao/gitskills.git
		Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

分支管理:
	1.创建与合并分支：
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
	2.解决冲突
		Git用<<<<<<<，=======，>>>>>>>标记出冲突文件中不同分支的内容。
		git log --graph命令可以看到分支合并图
		合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出		来曾经做过合并
		git merge --no-ff -m "merge with no-ff" dev
	3.Bug分支
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	4.Feature分支
		开发一个新feature，最好新建一个分支；
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	5.多人协作
		      •	  查看远程库信息，使用git remote -v；
            * 本地新建的分支如果不推送到远程，对其他人就是不可见的；
            * 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
            * 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
            * 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
            * 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
标签管理：
		1.创建标签
			     •	 命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
                * 命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
                * 命令git tag可以查看所有标签。
                2.操作标签
				   •	命令git push origin <tagname>可以推送一个本地标签；
                    * 命令git push origin --tags可以推送全部未推送过的本地标签；
                    * 命令git tag -d <tagname>可以删除一个本地标签；
                    * 命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
使用GitHub：
		      •      在GitHub上，可以任意Fork开源仓库；
            *    自己拥有Fork后的仓库的读写权限；
            * 可以推送pull request给官方仓库来贡献代码。
搭建Git服务器：
	1.假设你已经有sudo权限的用户账号，下面，正式开始安装
		第一步，安装git：
			$ sudo apt-get install git
		第二步，创建一个git用户，用来运行git服务：
			$ sudo adduser git
		第三步，创建证书登录：
			收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，			一行一个。
		第四步，初始化Git仓库：
			先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
			$ sudo git init --bare sample.git
			Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改			工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
			$ sudo chown -R git:git sample.git
		第五步，禁用shell登录：
			出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
			git:x:1001:1001:,,,:/home/git:/bin/bash
			改为：
			git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
			这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
		第六步，克隆远程仓库：
			现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
			$ git clone git@server:/srv/sample.git
			Cloning into 'sample'...
			warning: You appear to have cloned an empty repository.
			剩下的推送就简单了。
		
		2.管理公钥
			如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号			人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
			这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。
		
		3.管理权限
			有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限			会精		确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权			限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。			Gitolite就是这个工具。
			这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。
		
		4.小结
            * 搭建Git服务器非常简单，通常10分钟即可完成；
            * 要方便管理公钥，用Gitosis；
            * 要像SVN那样变态地控制权限，用Gitolite。
